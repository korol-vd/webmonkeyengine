

plugins {
    id "java"
    id "war"
    id "org.teavm" version "0.9.0-dev-10"
  }

import java.security.MessageDigest
import java.nio.file.Files
import java.nio.file.Paths
def teaVM_VERSION="0.9.0-dev-10"
def teaVM_GROUPS="org.teavm"

configurations {
    compileOnlyWithResources {
        canBeResolved = true
    }
}
repositories {
        maven { url = uri("https://teavm.org/maven/repository") }
    maven { url "https://repo.repsy.io/mvn/riccardobl/jme3-teavm" }
    mavenCentral()
}


dependencies {
    compileOnlyWithResources project(':jme3-core')
    compileOnlyWithResources project(':jme3-plugins')
    compileOnlyWithResources project(':jme3-effects')
    compileOnlyWithResources project(':jme3-terrain')
    api project(':jme3-core')

    api( project(':jme3-plugins')){
        exclude group: 'com.google.code.gson', module: 'gson'
        exclude module: 'jme3-plugins-json-gson'

    }
    implementation project(':jme3-plugins-json')
    api project(':jme3-effects')
    api project(':jme3-terrain')
        api project(':jme3-jogg')

    // api (project(':jme3-jbullet'))


    implementation "${teaVM_GROUPS}:teavm-tooling:$teaVM_VERSION"
    implementation "${teaVM_GROUPS}:teavm-core:$teaVM_VERSION"
    implementation "${teaVM_GROUPS}:teavm-classlib:$teaVM_VERSION"
    // api 'javax.vecmath:vecmath:1.5.2'
    implementation "${teaVM_GROUPS}:teavm-classlib:$teaVM_VERSION"
    implementation "${teaVM_GROUPS}:teavm-jso-apis:$teaVM_VERSION"
    implementation "${teaVM_GROUPS}:teavm-jso:$teaVM_VERSION"
    implementation "${teaVM_GROUPS}:teavm-metaprogramming-api:$teaVM_VERSION"
    implementation project(":jme3-jmetx")
 
}



task generateThumbnails(type: Copy) {
    def sourceDir = file("$buildDir/generated/teavm/js/")

    from sourceDir
    into sourceDir // We'll use the same directory for both source and destination

    include '**/*.png'

    eachFile { details ->
        if (details.file.isFile()) {
            def inputFile = details.file

            // Set the desired thumbnail size (you can change this as needed)
            def thumbnailWidth = 128
            def thumbnailHeight = 128

            // Determine the relative path of the current file
            def relativePath = sourceDir.toPath().relativize(inputFile.toPath())

            // Build the path to the .thumbnail/jme directory for the current file
            def thumbnailDir = new File(sourceDir, relativePath.toString() + "/.thumbnail/jme")
            thumbnailDir.mkdirs()

            // Build the output file path for the thumbnail
            def outputFile = new File(thumbnailDir, inputFile.name)

            // Resize the image using pure Java
            resizeImage(inputFile, outputFile, thumbnailWidth, thumbnailHeight)
        }
    }
}

def resizeImage(inputFile, outputFile, width, height) {
    try {
        def inputImage = javax.imageio.ImageIO.read(inputFile)
        def outputImage = new java.awt.image.BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB)
        def graphics2D = outputImage.createGraphics()

        // Apply the resizing
        graphics2D.drawImage(inputImage, 0, 0, width, height, null)
        graphics2D.dispose()

        // Save the resized image
        javax.imageio.ImageIO.write(outputImage, "png", outputFile)
    } catch (Exception e) {
        e.printStackTrace()
    }
}

task copyAllResources(type: Copy) {
    from "src/main/resources"
    configurations.each { configuration ->
        if (! configuration.name.endsWith('WithResources')) return;
        configuration.resolve().each { File file ->
            System.out.println(configuration.name+" "+file);
            if (file.isDirectory()) {
                from file
            } else {
                from zipTree(file) 
            }
        }
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE // You can change this to any other strategy
    // Specify the output directory for all resources
    into "$buildDir/generated/teavm/js/" // Change this path to the desired output directory
}
 
 


task generateResourcesIndex {
    dependsOn copyAllResources

    doLast {
        def outputDir = file("$buildDir/generated/teavm/js/")
        def outputFile = file("$buildDir/generated/teavm/js/resourcesIndex.txt")

        outputFile.text = generateHashes(outputDir)
    }
}

def generateHashes(File dir) {
    def hashes = []
    Files.walk(Paths.get(dir.toURI())).filter { 
        Files.isRegularFile(it) 
    }.forEach { file ->
        def relativePath = dir.toPath().relativize(file).toString()
        if(relativePath.endsWith(".class")) return;
        if(relativePath.endsWith(".java")) return;
        def hash = generateSHA256(file.toFile())
        hashes << "$hash $relativePath"
    }
    return hashes.join('\n')
}

def generateSHA256(file) {
    def messageDigest = MessageDigest.getInstance("SHA-256")
    file.eachByte(4096) { bytes, len ->
        messageDigest.update(bytes, 0, len)
    }
    return messageDigest.digest().collect { String.format("%02x", it) }.join()
}




teavm.js {
    addedToWebApp = true
    mainClass = "com.jme3.web.WebApp"
    obfuscated = false
    debugInformation = true
    strict= false
    outOfProcess=false
    // processMemory=6000
    fastGlobalAnalysis=false
    // optimization=org.teavm.gradle.api.OptimizationLevel.NONE
    sourceMap=true
    
    def classesToPreserve=[
        "**/J3MLoader.java",
        "**/WAVLoader.java",
        "**/CursorLoader.java",
        "**/WebLocator.java",
        "**/*Logic.java",
        "**/*AssetCache.java",
        "**/*Processor.java",
        "**/StbImageLoader.java",
        "**/GLSLLoader.java",
        "**/CloneableAssetProcessor.java",
        "**/BinaryLoader.java",
                "**/ShaderNodeDefinitionLoader.java",
        "**/HeapAllocator.java",
        "**/SinglePassAndImageBasedLightingLogic.java",
          "**/OGGLoader.java",
        //  "**/OBJLoader.java",
        //  "**/MTLLoader.java",

         "**/GltfLoader.java",
         "**/BinLoader.java",
         "**/GlbLoader.java",

        "**/HDRLoader.java",
         "**/TGALoader.java",
         "**/DDSLoader.java",
         "**/Image.java",
            "**/JmeTxRoot.java",

        "**/BitmapFontLoader.java",
                "**/LightProbe.java",
"**/WebResourceLoaderImplNoCache.java",
        // "**/SkeletonLoader.java",
        // "**/MaterialLoader.java",
        // "**/SceneLoader.java",
        // "**/MeshLoader.java",


    ]
    def projects = [
        project(':jme3-core'),
        project(':jme3-web'),
        project(':jme3-jogg'),
        project(':jme3-effects'),
        project(':jme3-terrain'),
        project(':jme3-plugins'),
    ]

    for(def project in projects) {
       def mainJavaDirs = project.sourceSets.main.java.srcDirs.iterator();
       while(true){
            if(!mainJavaDirs.hasNext()) break;
            def mainJavaDir=mainJavaDirs.next();
            
            fileTree(mainJavaDir).matching {
                include classesToPreserve
            }.forEach { file ->
                def filePath = file.path.replaceAll('\\.java$', '').replaceAll('/', '.').substring(mainJavaDir.path.length() + 1)
                System.out.println("preserve " + filePath)
                preservedClasses.add(filePath)
            }
       }
    }
    
    targetFileName = "jmeapp.js"
}


// map of os-arch to download like of caddy server
def caddyLinks=[
    "linux-amd64":"https://caddyserver.com/api/download?os=linux&arch=amd64",
    "windows-arm64":"https://caddyserver.com/api/download?os=windows&arch=amd64",
    "darwin-amd64":"https://caddyserver.com/api/download?os=darwin&arch=amd64",
    "darwin-arm64":"https://caddyserver.com/api/download?os=darwin&arch=arm64",
    "linux-arm64":"https://caddyserver.com/api/download?os=linux&arch=arm64",
]

def getOsArch(){
    def os=org.gradle.internal.os.OperatingSystem.current()
    def osName="linux";
    if(os.isWindows()) osName="windows";
    else if(os.isMacOsX()) osName="darwin";

    def arch=System.getProperty('os.arch');
    def archName="amd64";
    if(arch=="arm64"||arch=="aarch64") archName="arm64";


    return  osName+"-"+archName;   

}
task downloadCaddyIfDoesntExist {
    def osArch = getOsArch()
    def targetDir = file("${project.buildDir}/caddy-${osArch}")
    def targetFile = file("${targetDir}/caddy")

    def url = caddyLinks[osArch]
    if (url == null) throw new RuntimeException("No caddy download link for $osArch")
    if (!targetDir.exists()) targetDir.mkdirs()

    if (!targetFile.exists()) {
        println("Download caddy in "+targetFile)
        new URL(url).withInputStream { inputStream ->
            targetFile.withOutputStream { outputStream ->
                outputStream << inputStream
            }
        }

        // Make the downloaded file executable if needed
        targetFile.setExecutable(true)

        // Check if the download was successful
        if (!targetFile.exists()) {
            throw new RuntimeException("Failed to download Caddy")
        }
    } else {
        println "Caddy already exists: $targetFile"
    }
    
}
task generateCaddyfile {
        def caddyfileContent = """{
        auto_https off
}
:8080 {
        root * ${project.buildDir}/generated/teavm/js/
        encode gzip
        file_server browse
}
"""
        
        def caddyfilePath = file("${project.buildDir}/Caddyfile")

        caddyfilePath.text = caddyfileContent
    
}


// task startServer(type: Exec) {
//     def osArch=getOsArch();
//     def targetDir=file("${project.buildDir}/caddy-"+osArch);

    
//     // Print a debug message
//         println "Starting Caddy server..."

//         // Construct the command line
//         def command = "${targetDir}/caddy"
//         def configFile = "${project.buildDir}/Caddyfile"
        
//         println "Command: $command"
//         println "Config File: $configFile"

//         // Execute the command
//         commandLine command, 'start', '--config', configFile
//         workingDir project.buildDir
//         ignoreExitValue true
   
 
// }
task startServer {
    def osArch = getOsArch()
    def targetDir = file("${project.buildDir}/caddy-${osArch}")

    doLast {
   

        // Start the Caddy process
        def processBuilder = new ProcessBuilder("${targetDir}/caddy", "run", "--config", "${project.buildDir}/Caddyfile")
            .directory(project.buildDir)
            .inheritIO();

        
        println "Command: ${processBuilder.command()}"

        println "Starting Caddy server in "+project.buildDir
        def caddyProcess = processBuilder.start()

        // Add a shutdown hook to gracefully stop Caddy on SIGTERM
        Runtime.getRuntime().addShutdownHook(new Thread({
            println "Received SIGTERM, stopping Caddy gracefully..."
            caddyProcess.destroy()
        }))

      
        // Wait for the Caddy process to finish (optional)
        def exitCode = caddyProcess.waitFor()
        println "Caddy process exited with code: $exitCode"

        
        caddyProcess.destroy()

        
    }
}
startServer.dependsOn('downloadCaddyIfDoesntExist') 
